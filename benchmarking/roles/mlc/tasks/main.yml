---
- name: Include crowdstrike
  include_vars: "{{ roles_path }}/crowdstrike/vars/crowdstrike.yml"

- name: run mlc benchmark
  block:

    - name: check for /usr/local/bin/mlc
      stat:
        path: /usr/local/bin/mlc
      register: mlc_result
    
    - name: check for  {{ prog }}
      fail:
        msg: "{{ prog }} does not exist on this system"
      when:
         - not mlc_result.stat.exists
    
    - name: set short date
      shell: "date +%d%m%y"
      register: tstamp
      when:
         - mlc_result.stat.exists
         - ansible_distribution_major_version|int >= 7
    
    - name: Get List of services
      service_facts:
    
    - name: Output message if Crowdstrike missing
      shell: "{{ item }}"
      with_items:
        - "{{ crowdstrike_missing }}"
      when:
        - "'falcon-sensor.service' not in services"
    
    - name: Stop Crowdstrike if exists
      shell: "{{ item }}"
      with_items:
        - "{{ crowdstrike_stop }}"
      when:
        - ( crowdstrike == "yes" ) and ( "'falcon-sensor.service' not in services" )
        - cgroups == "yes"
    
    - name: Stop cgroups service
      shell: "{{ item }}"
      with_items:
        - "{{ LLcgconfig_stop }}"
      when:
        - "'LLcgconfig' in services"
    
    - name: run baseline mlc
      shell: "{{ item }}"
      with_items:
         - "{{ commands }}"
      when:
         - mlc_result.stat.exists
         - ansible_distribution_major_version|int >= 7

    - name: Start Crowdstrike if exists
      shell: "{{ item }}"
      with_items:
        - "{{ crowdstrike_start }}"
      when:
        - ( crowdstrike == "yes" ) and ( "'falcon-sensor.service' not in services" )
        - cgroups == "yes"
    
    - name: Run benchmark again
      shell: "{{ item }}"
      with_items:
        - "{{ commands }}"
      when:
        - "'falcon-sensor.service' in services"
    
    - name: Start cgroups service
      shell: "{{ item }}"
      with_items:
        - "{{ LLcgconfig_start }}"
      when:
        - "'LLcgconfig' in services"
        - cgroups == "yes"
    
    - name: find file on remote to copy
      find:
        paths: /tmp/
        recurse: no
        patterns: "mlc.log.{{ tstamp.stdout }}.txt"
      register: files_to_copy
      when:
         - mlc_result.stat.exists
         - ansible_distribution_major_version|int >= 7
    
    - name: Copy logfile to control server
      fetch:
         src: "{{ item.path }}"
         dest: "{{ logs_dir }}/{{ ansible_hostname }}.mlc.log.{{ tstamp.stdout }}.txt"
         flat: yes
      with_items: "{{ files_to_copy.files }}"
      when:
         - mlc_result.stat.exists
         - ansible_distribution_major_version|int >= 7
    
    - name: local action on controller to fix fetched file perms
      file:
         path: "{{ logs_dir }}"
         state: directory
         mode: 0755
         recurse: yes
      delegate_to: localhost
      when:
         - mlc_result.stat.exists
         - ansible_distribution_major_version|int >= 7

  tags: mlc
